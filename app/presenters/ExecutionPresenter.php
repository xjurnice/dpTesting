<?php

namespace App\Presenters;


use App\Model\PlanModel;
use Nette,
    Nette\Application\UI\Form;
use App\Model\CaseModel;
use App\Model\ExecutionModel;
use AlesWita;
use Ublaboo\DataGrid\DataGrid;


class ExecutionPresenter extends BasePresenter
{

    /** @var UserModel */
    private $caseModel;

    /** @var PlanModel */
    private $planModel;

    /** @var ExecutionModel */
    private $executionModel;

    private $data = null;
    private $case_id;

    /** @var Nette\Http\Session */
    private $session;

    /** @var Nette\Http\SessionSection */
    private $sessionSection;

    private $start_time;

    /** @persistent */
    public $id;
    /** @persistent */
    public $plan_id;


    public function __construct(CaseModel $caseModel, ExecutionModel $executionModel, PlanModel $planModel, Nette\Http\Session $session)
    {
        $this->planModel = $planModel;
        $this->caseModel = $caseModel;
        $this->executionModel = $executionModel;
    }

    public function startup()
    {
        parent::startup(); // TODO: Change the autogenerated stub

        $session = $this->getSession();
        $sessionSection = $session->getSection('sekcePromenna');
        $sessionSection->promenna = new \Nette\Utils\DateTime();
    }

    public function handleDefect($id, $case_id)
    {

        $this->case_id = $case_id;


        parent::handleModal('defect');

    }

    protected function createComponentDefectForm()
    {

        $form = new Form;
        $form->getElementPrototype()->class('ajax');
        $form->setRenderer(new AlesWita\FormRenderer\BootstrapV4Renderer);


        $form->addHidden("step_id")->setDefaultValue($this->id);
        $form->addHidden("case_id")->setDefaultValue($this->case_id);
        $form->addTextArea('description', 'Popis', 70, 5)->setRequired('Prosím zadejte popis defektu');
        $form->addSubmit('edit', 'Odeslat')->getControlPrototype()->setClass('btn btn-primary btn-lg btn-block');
        $form->onSuccess[] = [$this, 'saveDefect'];

        return $form;
    }

    public function SaveDefect(Form $form, $values)
    {

        if ($this->isAjax()) {
            $values = $form->getValues();
            $this->executionModel->addDefect($values);
            $this->redrawControl('modal');
        }


    }
    public function renderRun($case_id, $plan_id)
    {
        $this->plan_id = $plan_id;
        $this->case_id = $case_id;
        $this->template->case = $this->caseModel->getCase($case_id);
        $this->template->steps = $this->caseModel->getAllSteps($case_id);
    }

    public function renderDefault($id)
    {

        $this->id = $id;

    }
    public function renderDetail($id)
    {
        $this->template->exe = $this->executionModel->getExecutionByID($id);
        $this->template->author = $this->executionModel->getExecutionAuthor($id);

        $this->template->plan = $this->executionModel->getExecutionPlan($id);

        $succes = $this->executionModel->getExecutionPass($id);
        $fail = $this->executionModel->getExecutionFail($id);
        $skip = $this->executionModel->getExecutionSkip($id);
        $this->template->labels = ["Úspěšný", "Neúspěšný", "Vynechaný"];
        $this->template->series = [$succes, $fail, $skip];
       $this->template->steps = $this->executionModel->getDefects($id);

    }


    protected function createComponentRunExecutionForm()
    {

        $form = new Form;
        $form->setRenderer(new AlesWita\FormRenderer\BootstrapV4Renderer);
        $form->addProtection();
        $form->addTextArea('note', 'Poznámka:');
        $status = array(
            '1' => 'Úspěšný',
            '2' => 'Neúspěšný',
            '3' => 'Vynechaný',
        );
        $form->addSelect('status', 'Status', $status)->setRequired('Uvedte status')->setOption('left-addon', 'addon text')
            ->getControlPrototype();

        $form->addHidden('test_plan_id')->setDefaultValue($this->plan_id);
        $form->addHidden('number_defect')->setHtmlAttribute("id", 'number_defect');
        $form->addHidden('number_skip')->setHtmlAttribute("id", 'number_skip');
        $form->addHidden('number_pass')->setHtmlAttribute("id", 'number_pass');
        $form->addHidden('start_time')->setDefaultValue($this->getSession('sekcePromenna')->promenna);
        $form->addHidden('spend_time')->setHtmlAttribute("id", 'spend_time');
        $form->addHidden('run_by')->setDefaultValue($this->getUser()->getIdentity()->id);
        $form->addHidden('case_id')->setDefaultValue($this->case_id);
        $form->addSubmit('run', 'Dokončit test')->setHtmlAttribute("id", 'pass')
            ->getControlPrototype()->setClass('btn btn-primary btn-lg btn-block hidden');
        $form->onSuccess[] = [$this, 'RunExecution'];
        //dump($form->getValues());
        return $form;
    }

    public function RunExecution(Form $form, $values)
    {
        $values = $form->getValues();
        $id = $values["case_id"];
        $plan_id = $values["test_plan_id"];
        $this->executionModel->addExecution($values);

        if ($plan_id <> 0) {

            $case = $this->planModel->getNextCase($this->plan_id);

            if ($case['id'] <> 0) {
                $this->redirect("Execution:run", $case['id'], $this->plan_id);
            } else {
                $this->flashMessage("Test plán je dokončen");
                $s['status']=1;
                $this->planModel->setTestPlanFinished($this->plan_id,$s); // 1 means finished
                $this->redirect("Plan:detail", $this->plan_id);


            }

        }
        $this->flashMessage('Test byl dokončen');
        $this->redirect("Case:detail", $id);


    }

    public function createComponentExecutionGrid($name)
    {

        $grid = new DataGrid();
        $this->addComponent($grid, $name);
        $grid->setRememberState(FALSE);

        $fluent = $this->executionModel->getAllExecutions($this->getSession('sekcePromenna')->project);
        $grid->setDataSource($fluent);
        $grid->setDefaultSort(['start_time' => 'DESC']);

        $grid->addColumnLink('link', 'Testovací případ', 'Case:detail', 'name', ['id' => 'case_id'])->setFilterText(['name', 'id']);
        $grid->addColumnDateTime('start_time', 'Čas spusteni')
            ->setFormat('d.m.Y H:i:s')->setSortable();
        $grid->addColumnDateTime('end_time', 'Čas ukonceni')
            ->setFormat('d.m.Y H:i:s')->setSortable();
        try {
            $grid->addColumnText('spend_time', 'Čas')
                ->setSortable()->setRenderer(function ($item) {
                    if ($item->spend_time < 60) {
                        return ($item->spend_time) . ' sekund';
                    } else {

                        return (round($item->spend_time / 60, 2)) . ' minut';
                    }
                })->setSortable();
        } catch (DataGridException $e) {
        };

        $set = [];
        $set = ['' => 'Všechno'] + $this->caseModel->getSets($this->getSession('sekcePromenna')->project)->fetchPairs('id', 'name');

        $plan = [];
        $plan = ['' => 'Všechno'] + $this->caseModel->getTestPlan($this->getSession('sekcePromenna')->project)->fetchPairs('id', 'name');
        $plan2 = [];
        $plan2 = ['' => '-'] + $this->caseModel->getTestPlan($this->getSession('sekcePromenna')->project)->fetchPairs('id', 'name');
        $grid->addColumnText('test_plan_id', 'Test Plán')
            ->setReplacement($plan2)
            ->setFilterSelect($plan);
        $category = [];
        $category = ['' => 'Všechno'] + $this->caseModel->getCaseCategory()->fetchPairs('id', 'name');
        $grid->addColumnText('set_id', 'Sada')
            ->setReplacement($this->caseModel->getSets($this->getSession('sekcePromenna')->project)->fetchPairs('id', 'name'))
            ->setFilterSelect($set);

        $grid->addColumnText('category_id', 'Kategorie')
            ->setReplacement($this->caseModel->getCaseCategory()->fetchPairs('id', 'name'))
            ->setFilterSelect($category);

        $users = [];
        $users = ['' => 'Všechno']  + $this->caseModel->getUsers($this->getSession('sekcePromenna')->project)->fetchPairs('id', 'username');
        $grid->addColumnText('run_by', 'Vykonáno')
            ->setReplacement($this->caseModel->getUsers($this->getSession('sekcePromenna')->project)->fetchPairs('id', 'username'))
            ->setFilterSelect($users);

        $grid->addColumnStatus('status', 'Status')
            ->setCaret(false)
            ->addOption(1, 'Úspěšný')
            ->setIcon('check')
            ->setClass('btn-success')
            ->endOption()
            ->addOption(2, 'Neúspěšný')
            ->setIcon('times')
            ->setClass('btn-danger')
            ->endOption()
            ->addOption(3, 'Vynechaný')
            ->setIcon('dot-circle')
            ->setClass('btn-warning')
            ->endOption()->onChange[] = [$this, 'statusChange'];



        $grid->addAction('detail', '')
            ->setIcon('lemon')
            ->setTitle('Detail');
    }


    public function statusChange($id, $new_status)
    {
        if (in_array($new_status, [1, 2, 3])) {
            $this->executionModel->getExecution()->where('id = ?', $id)
                ->update(['status' => $new_status]);
        }


        $this->flashMessage("Status testovacího případu byl změněn.");
        $this->redirect("this");

    }
}