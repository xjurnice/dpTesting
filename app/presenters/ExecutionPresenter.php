<?php

namespace App\Presenters;


use Nette,
    Nette\Application\UI\Form;
use App\Model\CaseModel;
use App\Model\ExecutionModel;
use AlesWita;
use Ublaboo\DataGrid\DataGrid;


class ExecutionPresenter extends BasePresenter
{

    /** @var UserModel */
    private $caseModel;

    /** @var ExecutionModel */
    private $executionModel;

    private $data = null;
    private  $case_id;

    /** @var Nette\Http\Session */
    private $session;

    /** @var Nette\Http\SessionSection */
    private $sessionSection;

    private $start_time;

    /** @persistent */
    public $id;


    public function __construct(CaseModel $caseModel, ExecutionModel $executionModel, Nette\Http\Session $session)
    {

        $this->caseModel = $caseModel;
        $this->executionModel = $executionModel;
    }

    public function startup()
    {
        parent::startup(); // TODO: Change the autogenerated stub

        $session = $this->getSession();
        $sessionSection = $session->getSection('sekcePromenna');
        $sessionSection->promenna = new \Nette\Utils\DateTime();
    }


    public function renderRun($case_id)
    {

        $this->case_id =$case_id;
        $this->template->case= $this->caseModel->getCase($case_id);
        $this->template->steps= $this->caseModel->getAllSteps($case_id);
    }

    public function renderDefault($id)
    {

        $this->id =$id;

    }



    protected function createComponentRunExecutionForm()
    {

        $form = new Form;
        $form->setRenderer(new AlesWita\FormRenderer\BootstrapV4Renderer);
        $form->addProtection();
        $form->addTextArea('note', 'Poznámka:');
        $status = array(
            '1' => 'Úspěšný',
            '2' => 'Neúspěšný',
            '3' => 'Vynechaný',
        );
        $form->addSelect('status', 'Status', $status)->setRequired('Uvedte status')->setOption('left-addon', 'addon text')
            ->getControlPrototype();
        $form->addHidden('number_defect')->setHtmlAttribute("id",'number_defect');
        $form->addHidden('number_skip')->setHtmlAttribute("id",'number_skip');
        $form->addHidden('number_pass')->setHtmlAttribute("id",'number_pass');
        $form->addHidden('start_time')->setDefaultValue($this->getSession('sekcePromenna')->promenna);
        $form->addHidden('spend_time')->setHtmlAttribute("id",'spend_time');
        $form->addHidden('run_by')->setDefaultValue($this->getUser()->getIdentity()->id);
        $form->addHidden('case_id')->setDefaultValue($this->case_id);
        $form->addSubmit('run', 'Dokončit test')->setHtmlAttribute("id",'pass')
            ->getControlPrototype()->setClass('btn btn-primary btn-lg btn-block hidden');
        $form->onSuccess[] = [$this, 'RunExecution'];

        return $form;
    }

    public function RunExecution(Form $form, $values)
    {
        $id = $values["case_id"];
        $this->executionModel->addExecution($values);
        $this->flashMessage('Test byl dokončen');
        $this->redirect("Case:detail",$id);



    }

    public function createComponentExecutionGrid($name)
    {

        $grid = new DataGrid($this, $name);

        $fluent = $this->executionModel->getAllExecutions($this->getSession('sekcePromenna')->project);
        $grid->setDataSource($fluent);

        $grid->addColumnDateTime('start_time', 'Cas spusteni')
            ->setFormat('d.m.Y H:i:s')->setSortable();
        $grid->addColumnDateTime('end_time', 'Cas ukonceni')
            ->setFormat('d.m.Y H:i:s')->setSortable();


        try {
            $grid->addColumnText('spend_time', 'Cas')
                ->setSortable()->setRenderer(function ($item) {
                    if ($item->spend_time < 60) {
                        return ($item->spend_time) . ' sekund';
                    } else {

                        return (round($item->spend_time / 60, 2)) . ' minut';
                    }
                })->setSortable();
        } catch (DataGridException $e) {
        };
        $grid->addColumnStatus('status', 'Status')
            ->setCaret(false)
            ->addOption(1, 'Úspěšný')
            ->setIcon('check')
            ->setClass('btn-success')
            ->endOption()
            ->addOption(2, 'Neúspěšný')
            ->setIcon('times')
            ->setClass('btn-danger')
            ->endOption()
            ->addOption(3, 'Vynechaný')
            ->setIcon('dot-circle')
            ->setClass('btn-warning')
            ->endOption()->onChange[] = [$this, 'statusChange'];
        $grid->addColumnLink('link', 'Testovací případ', 'Case:detail', 'name',  ['id' => 'case_id'])->setFilterText(['name', 'id']);

    }


    public function statusChange($id, $new_status)
    {
        if (in_array($new_status, [1, 2, 3])) {
            $this->executionModel->getExecution()->where('id = ?', $id)
                ->update(['status' => $new_status]);
        }


        $this->flashMessage("Status of category [$id] was updated.");
        $this->redirect("this");

    }
}